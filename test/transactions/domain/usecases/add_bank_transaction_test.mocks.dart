// Mocks generated by Mockito 5.4.4 from annotations
// in budget_manager/test/transactions/domain/usecases/add_bank_transaction_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:budget_manager/src/core/errors/failure.dart' as _i5;
import 'package:budget_manager/src/transactions/data/repositories/bank_transactions_repository.dart'
    as _i3;
import 'package:budget_manager/src/transactions/domain/entities/bank_transaction.dart'
    as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BankTransactionsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBankTransactionsRepository extends _i1.Mock
    implements _i3.BankTransactionsRepository {
  MockBankTransactionsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.BankTransaction>>>
      getAllBankTransactions() => (super.noSuchMethod(
            Invocation.method(
              #getAllBankTransactions,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i6.BankTransaction>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.BankTransaction>>(
              this,
              Invocation.method(
                #getAllBankTransactions,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.BankTransaction>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.BankTransaction>> getBankTransaction(
          int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBankTransaction,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.BankTransaction>>.value(
                _FakeEither_0<_i5.Failure, _i6.BankTransaction>(
          this,
          Invocation.method(
            #getBankTransaction,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.BankTransaction>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> addBankTransaction(
          _i6.BankTransaction? banktransaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBankTransaction,
          [banktransaction],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #addBankTransaction,
            [banktransaction],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> updateBankTransaction(
          _i6.BankTransaction? banktransaction) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBankTransaction,
          [banktransaction],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #updateBankTransaction,
            [banktransaction],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> deleteBankTransaction(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBankTransaction,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
            _FakeEither_0<_i5.Failure, int>(
          this,
          Invocation.method(
            #deleteBankTransaction,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, int>>);
}
